#include "Queue.h"
#include <iostream>
#include <assert.h>

Queue::Queue(int initialSize) {
  arrayQueue = new int[initialSize];
  front = 0;
  back = 0;
  capacity = initialSize;
  numElements = 0;

}

Queue::~Queue() {
  delete[] arrayQueue;
}

void Queue::enqueue(int value) {
   
	/*  std::cout << "Inside enqueue:before if" << std::endl;
  if (numElements == capacity)  {
     doubleCapacity=capacity*2;
    
    std::cout << "Inside enqueue:before for" << std::endl;
   int* theQueue = new int[doubleCapacity];  // create new stack twice as big
    for (int i=0; i<=capacity; i++) {
     
      theQueue[i] = arrayQueue[i];
     }
   
     delete[] arrayQueue;
     arrayQueue = theQueue;  
     capacity = doubleCapacity;
 
   }*/
 
assert(back != capacity);
   
  //std::cout << "Inside enqueue:before Quarter " << std::endl;
   if (isQuarter()) {  
    
  std::cout << "Inside enqueue:before Quarter " << std::endl;
    int* newQueueh = new int[capacity/2];  // create new queue half as big
   for (int i =1; i<=capacity; i++) {
     
      newQueueh[i] = arrayQueue[i];
     }
     capacity = doubleCapacity;
     delete [] arrayQueue;
     newQueueh = arrayQueue;


 }  
      
  std::cout << "Inside enque:before back is set " << std::endl;
      back = (back+1)% capacity;
      arrayQueue[back] = value;
      numElements++;
     
   
  std::cout << "Inside enque:after back is set" << std::endl;
  
}

int Queue::dequeue(){
  
 // int result = arrayQueue[front+1];
   int result = arrayQueue[front]; 

  std::cout << "Inside deque:before if" << std::endl;
 if (isEmpty()){
     
  std::cout << "Method Invalid: Queue is Empty" << std::endl;
  
 }
  else {
  
  std::cout << "Inside dequeue:else" << std::endl;
     
     front = (front+1)% capacity;
     	 
     numElements--;   
     
  
  std::cout << "Inside dequeue:end of else" << std::endl;
 
}
  
     return result;

}
/*
int Queue::peek() {
 if (!isEmpty()){
  
  return arrayQueue[back-1];
  }
  else{
  std::cout << "Queue is Empty" << std::endl;
  }
}
*/
int Queue::size() {
  if (isEmpty()) {
    return 0;
 }
  else {
    return numElements;
 } 
}

bool Queue::isEmpty(){
  if (front == back){
     return true;
 }
 else {
     return false;
  }
}
bool Queue::isFull(){
  if (capacity == numElements){

    return true;

}
 else {
    return false;
  }
}
bool Queue::isQuarter(){
  if((float) numElements/capacity < .25) {
     return true;
  }
 else {
     return false;
  }
}


